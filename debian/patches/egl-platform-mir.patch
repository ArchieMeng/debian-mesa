--- a/configure.ac
+++ b/configure.ac
@@ -1499,7 +1499,9 @@
 
 	android|fbdev|gdi|null)
 		;;
-
+        mir)
+                PKG_CHECK_MODULES([MIR], [mirclient])
+                ;;
 	*)
 		AC_MSG_ERROR([EGL platform '$plat' does not exist])
 		;;
@@ -1529,6 +1531,7 @@
 AM_CONDITIONAL(HAVE_EGL_PLATFORM_DRM, echo "$egl_platforms" | grep -q 'drm')
 AM_CONDITIONAL(HAVE_EGL_PLATFORM_FBDEV, echo "$egl_platforms" | grep -q 'fbdev')
 AM_CONDITIONAL(HAVE_EGL_PLATFORM_NULL, echo "$egl_platforms" | grep -q 'null')
+AM_CONDITIONAL(HAVE_EGL_PLATFORM_MIR, echo "$egl_platforms" | grep -q 'mir')
 
 AM_CONDITIONAL(HAVE_EGL_DRIVER_DRI2, test "x$HAVE_EGL_DRIVER_DRI2" != "x")
 
--- a/include/EGL/eglplatform.h
+++ b/include/EGL/eglplatform.h
@@ -104,6 +104,13 @@
 typedef struct egl_native_pixmap_t  *EGLNativePixmapType;
 typedef void                        *EGLNativeDisplayType;
 
+#elif defined(MIR_EGL_PLATFORM)
+
+#include <mir_toolkit/mir_client_library.h>
+typedef MirEGLNativeDisplayType EGLNativeDisplayType;
+typedef void                   *EGLNativePixmapType;
+typedef MirEGLNativeWindowType  EGLNativeWindowType;
+
 #elif defined(__unix__)
 
 #ifdef MESA_EGL_NO_X11_HEADERS
--- a/include/GL/internal/dri_interface.h
+++ b/include/GL/internal/dri_interface.h
@@ -832,10 +832,12 @@
     unsigned int pitch;
     unsigned int cpp;
     unsigned int flags;
+    unsigned int fd;    /**< Only available with DRI2_LOADER_VERSION >= 4, */
+                        /**< Only valid if name == 0 */
 };
 
 #define __DRI_DRI2_LOADER "DRI_DRI2Loader"
-#define __DRI_DRI2_LOADER_VERSION 3
+#define __DRI_DRI2_LOADER_VERSION 4
 struct __DRIdri2LoaderExtensionRec {
     __DRIextension base;
 
--- a/src/egl/drivers/dri2/Makefile.am
+++ b/src/egl/drivers/dri2/Makefile.am
@@ -63,3 +63,9 @@
 libegl_dri2_la_SOURCES += platform_drm.c
 AM_CFLAGS += -DHAVE_DRM_PLATFORM
 endif
+
+if HAVE_EGL_PLATFORM_MIR
+libegl_dri2_la_SOURCES += platform_mir.c
+AM_CFLAGS += -DHAVE_MIR_PLATFORM
+AM_CFLAGS += $(MIR_CFLAGS)
+endif
--- a/src/egl/drivers/dri2/egl_dri2.c
+++ b/src/egl/drivers/dri2/egl_dri2.c
@@ -643,6 +643,12 @@
          return EGL_TRUE;
       return dri2_initialize_wayland(drv, disp);
 #endif
+#ifdef HAVE_MIR_PLATFORM
+   case _EGL_PLATFORM_MIR:
+      if (disp->Options.TestOnly)
+         return EGL_TRUE;
+      return dri2_initialize_mir(drv, disp);
+#endif
 #ifdef HAVE_ANDROID_PLATFORM
    case _EGL_PLATFORM_ANDROID:
       if (disp->Options.TestOnly)
--- a/src/egl/drivers/dri2/egl_dri2.h
+++ b/src/egl/drivers/dri2/egl_dri2.h
@@ -64,6 +64,11 @@
 
 #endif /* HAVE_ANDROID_PLATFORM */
 
+#ifdef HAVE_MIR_PLATFORM
+#include <mir_toolkit/mir_client_library.h>
+#include <mir_toolkit/mesa/native_display.h>
+#endif
+
 #include "eglconfig.h"
 #include "eglcontext.h"
 #include "egldisplay.h"
@@ -192,6 +197,10 @@
    int			     formats;
    uint32_t                  capabilities;
 #endif
+
+#ifdef HAVE_MIR_PLATFORM
+  MirMesaEGLNativeDisplay *mir_disp;
+#endif
 };
 
 struct dri2_egl_context
@@ -238,7 +247,9 @@
    struct gbm_dri_surface *gbm_surf;
 #endif
 
-#if defined(HAVE_WAYLAND_PLATFORM) || defined(HAVE_DRM_PLATFORM)
+#if defined(HAVE_WAYLAND_PLATFORM) \
+   || defined(HAVE_DRM_PLATFORM) \
+   || defined(HAVE_MIR_PLATFORM)
    __DRIbuffer           *dri_buffers[__DRI_BUFFER_COUNT];
    struct {
 #ifdef HAVE_WAYLAND_PLATFORM
@@ -260,6 +271,10 @@
    /* EGL-owned buffers */
    __DRIbuffer           *local_buffers[__DRI_BUFFER_COUNT];
 #endif
+
+#ifdef HAVE_MIR_PLATFORM
+   MirMesaEGLNativeSurface *mir_surf;
+#endif
 };
 
 
@@ -327,4 +342,7 @@
 EGLBoolean
 dri2_initialize_android(_EGLDriver *drv, _EGLDisplay *disp);
 
+EGLBoolean
+dri2_initialize_mir(_EGLDriver *drv, _EGLDisplay *disp);
+
 #endif /* EGL_DRI2_INCLUDED */
--- /dev/null
+++ b/src/egl/drivers/dri2/platform_mir.c
@@ -0,0 +1,456 @@
+/*
+ * Copyright Â© 2012 Canonical, Inc
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+ * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ *
+ * Authors:
+ *    Christopher James Halse Rogers <christopher.halse.rogers@canonical.com>
+ */
+
+#include <mir_toolkit/mesa/native_display.h>
+
+#include "egl_dri2.h"
+#include "egl_dri2_fallbacks.h"
+#include "loader.h"
+
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+static __DRIbuffer *
+dri2_get_buffers_with_format(__DRIdrawable * driDrawable,
+			     int *width, int *height,
+			     unsigned int *attachments, int count,
+			     int *out_count, void *loaderPrivate)
+{
+   struct dri2_egl_surface *dri2_surf = loaderPrivate;
+   struct dri2_egl_display *dri2_dpy =
+      dri2_egl_display(dri2_surf->base.Resource.Display);
+   int i;
+
+   dri2_surf->buffer_count = 0;
+   for (i = 0; i < 2*count; i+=2) {
+      assert(attachments[i] < __DRI_BUFFER_COUNT);
+      assert(dri2_surf->buffer_count < 5);
+
+      if (dri2_surf->dri_buffers[attachments[i]] == NULL) {
+         /* Our frame callback must keep these buffers valid */
+         assert(attachments[i] != __DRI_BUFFER_FRONT_LEFT);
+         assert(attachments[i] != __DRI_BUFFER_BACK_LEFT);
+
+         dri2_surf->dri_buffers[attachments[i]] =
+            dri2_dpy->dri2->allocateBuffer(dri2_dpy->dri_screen,
+                  attachments[i], attachments[i+1],
+                  dri2_surf->base.Width, dri2_surf->base.Height);
+
+         if (!dri2_surf->dri_buffers[attachments[i]])
+            continue;
+      }
+
+      memcpy(&dri2_surf->buffers[dri2_surf->buffer_count],
+             dri2_surf->dri_buffers[attachments[i]],
+             sizeof(__DRIbuffer));
+
+      dri2_surf->buffer_count++;
+   }
+
+   assert(dri2_surf->base.Type == EGL_PIXMAP_BIT ||
+          dri2_surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]);
+
+   *out_count = dri2_surf->buffer_count;
+   if (dri2_surf->buffer_count == 0)
+	   return NULL;
+
+   *width = dri2_surf->base.Width;
+   *height = dri2_surf->base.Height;
+
+   return dri2_surf->buffers;
+}
+
+static __DRIbuffer *
+dri2_get_buffers(__DRIdrawable * driDrawable,
+		 int *width, int *height,
+		 unsigned int *attachments, int count,
+		 int *out_count, void *loaderPrivate)
+{
+   unsigned int *attachments_with_format;
+   __DRIbuffer *buffer;
+   const unsigned int format = 32;
+   int i;
+
+   attachments_with_format = calloc(count * 2, sizeof(unsigned int));
+   if (!attachments_with_format) {
+      *out_count = 0;
+      return NULL;
+   }
+
+   for (i = 0; i < count; ++i) {
+      attachments_with_format[2*i] = attachments[i];
+      attachments_with_format[2*i + 1] = format;
+   }
+
+   buffer =
+      dri2_get_buffers_with_format(driDrawable,
+				   width, height,
+				   attachments_with_format, count,
+				   out_count, loaderPrivate);
+
+   free(attachments_with_format);
+
+   return buffer;
+}
+
+
+static void
+dri2_flush_front_buffer(__DRIdrawable * driDrawable, void *loaderPrivate)
+{
+   (void) driDrawable;
+
+   /* FIXME: Does EGL support front buffer rendering at all? */
+
+#if 0
+   struct dri2_egl_surface *dri2_surf = loaderPrivate;
+
+   dri2WaitGL(dri2_surf);
+#else
+   (void) loaderPrivate;
+#endif
+}
+
+static EGLBoolean
+mir_advance_colour_buffer(struct dri2_egl_surface *surf)
+{
+   MirBufferPackage buffer_package;
+   if(!surf->mir_surf->surface_advance_buffer(surf->mir_surf, &buffer_package))
+      return EGL_FALSE;
+
+   /* We expect no data items, and (for the moment) one PRIME fd */
+   assert(buffer_package.data_items == 0);
+   assert(buffer_package.fd_items == 1);
+
+   /* Mir ABIs prior to release 0.1.2 lacked width and height */
+   if (buffer_package.width && buffer_package.height) {
+      surf->base.Width = buffer_package.width;
+      surf->base.Height = buffer_package.height;
+   }
+
+   surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]->name = 0;
+   surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]->fd = buffer_package.fd[0];
+   surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]->pitch = buffer_package.stride;
+   return EGL_TRUE;
+}
+
+/**
+ * Called via eglCreateWindowSurface(), drv->API.CreateWindowSurface().
+ */
+static _EGLSurface *
+dri2_create_mir_window_surface(_EGLDriver *drv, _EGLDisplay *disp,
+                               _EGLConfig *conf, EGLNativeWindowType window,
+                               const EGLint *attrib_list)
+{
+   struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   struct dri2_egl_config *dri2_conf = dri2_egl_config(conf);
+   struct dri2_egl_surface *dri2_surf;
+   MirSurfaceParameters surf_params;
+
+   (void) drv;
+
+   dri2_surf = calloc(1, sizeof *dri2_surf);
+   if (!dri2_surf) {
+      _eglError(EGL_BAD_ALLOC, "dri2_create_surface");
+      return NULL;
+   }
+
+   if (!_eglInitSurface(&dri2_surf->base, disp, EGL_WINDOW_BIT, conf, attrib_list))
+      goto cleanup_surf;
+
+   dri2_surf->mir_surf = window;
+   if (!dri2_surf->mir_surf->surface_get_parameters(dri2_surf->mir_surf, &surf_params))
+      goto cleanup_surf;
+
+   dri2_surf->base.Width = surf_params.width;
+   dri2_surf->base.Height = surf_params.height;
+
+   dri2_surf->dri_buffers[__DRI_BUFFER_FRONT_LEFT] =
+      calloc(sizeof(*dri2_surf->dri_buffers[0]), 1);
+   dri2_surf->dri_buffers[__DRI_BUFFER_BACK_LEFT] =
+      calloc(sizeof(*dri2_surf->dri_buffers[0]), 1);
+
+   dri2_surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]->attachment =
+      __DRI_BUFFER_BACK_LEFT;
+   /* We only do ARGB 8888 for the moment */
+   dri2_surf->dri_buffers[__DRI_BUFFER_BACK_LEFT]->cpp = 4;
+
+   if(!mir_advance_colour_buffer(dri2_surf))
+      goto cleanup_surf;
+
+   if (dri2_dpy->gbm_dri) {
+      struct gbm_dri_surface *surf = malloc(sizeof *surf);
+
+      dri2_surf->gbm_surf = surf;
+      surf->base.gbm = &dri2_dpy->gbm_dri->base.base;
+      surf->base.width = dri2_surf->base.Width;
+      surf->base.height = dri2_surf->base.Height;
+      surf->base.format = GBM_FORMAT_ARGB8888;
+      surf->base.flags = GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING;
+      surf->dri_private = dri2_surf;
+
+      dri2_surf->dri_drawable =
+          (*dri2_dpy->dri2->createNewDrawable) (dri2_dpy->dri_screen,
+                                                dri2_conf->dri_double_config,
+                                                dri2_surf->gbm_surf);
+   }
+   else {
+      dri2_surf->dri_drawable =
+          (*dri2_dpy->dri2->createNewDrawable) (dri2_dpy->dri_screen,
+                                                dri2_conf->dri_double_config,
+                                                dri2_surf);
+   }
+
+   if (dri2_surf->dri_drawable == NULL) {
+      _eglError(EGL_BAD_ALLOC, "dri2->createNewDrawable");
+   }
+
+   return &dri2_surf->base;
+
+cleanup_surf:
+   free(dri2_surf);
+   return NULL;
+}
+
+static _EGLSurface *
+dri2_mir_create_pixmap_surface(_EGLDriver *drv, _EGLDisplay *disp,
+                              _EGLConfig *conf, void *native_window,
+                              const EGLint *attrib_list)
+{
+   _eglError(EGL_BAD_PARAMETER, "cannot create EGL pixmap surfaces on mir");
+   return NULL;
+}
+
+
+static EGLBoolean
+dri2_destroy_mir_surface(_EGLDriver *drv, _EGLDisplay *disp, _EGLSurface *surf)
+{
+   struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   struct dri2_egl_surface *dri2_surf = dri2_egl_surface(surf);
+   int i;
+
+   (void) drv;
+
+   if (!_eglPutSurface(surf))
+      return EGL_TRUE;
+
+   (*dri2_dpy->core->destroyDrawable)(dri2_surf->dri_drawable);
+
+   for (i = 0; i < __DRI_BUFFER_COUNT; ++i) {
+      if (dri2_surf->dri_buffers[i] && !((i == __DRI_BUFFER_FRONT_LEFT) ||
+                                         (i == __DRI_BUFFER_BACK_LEFT))) {
+         dri2_dpy->dri2->releaseBuffer(dri2_dpy->dri_screen,
+                                       dri2_surf->dri_buffers[i]);
+      }
+   }
+
+   free(dri2_surf->gbm_surf);
+   free(surf);
+
+   return EGL_TRUE;
+}
+
+/**
+ * Called via eglSwapInterval(), drv->API.SwapInterval().
+ */
+static EGLBoolean
+dri2_set_swap_interval(_EGLDriver *drv, _EGLDisplay *disp,
+                       _EGLSurface *surf, EGLint interval)
+{
+   struct dri2_egl_surface *dri2_surf = dri2_egl_surface(surf);
+   if(!dri2_surf->mir_surf->surface_set_swapinterval(dri2_surf->mir_surf, interval))
+      return EGL_FALSE;
+   return EGL_TRUE;
+}
+
+/**
+ * Called via eglSwapBuffers(), drv->API.SwapBuffers().
+ */
+static EGLBoolean
+dri2_swap_buffers(_EGLDriver *drv, _EGLDisplay *disp, _EGLSurface *draw)
+{
+   struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   struct dri2_egl_surface *dri2_surf = dri2_egl_surface(draw);
+
+   (*dri2_dpy->flush->flush)(dri2_surf->dri_drawable);
+
+   int rc = mir_advance_colour_buffer(dri2_surf);
+
+   (*dri2_dpy->flush->invalidate)(dri2_surf->dri_drawable);
+
+   return rc;
+}
+
+static int
+dri2_mir_authenticate(_EGLDisplay *disp, uint32_t id)
+{
+   return 0;
+}
+
+static _EGLImage *
+dri2_create_image_khr_pixmap(_EGLDisplay *disp, _EGLContext *ctx,
+                             EGLClientBuffer buffer, const EGLint *attr_list)
+{
+   struct dri2_egl_display *dri2_dpy = dri2_egl_display(disp);
+   struct gbm_dri_bo *dri_bo = gbm_dri_bo((struct gbm_bo *) buffer);
+   struct dri2_egl_image *dri2_img;
+
+   dri2_img = malloc(sizeof *dri2_img);
+   if (!dri2_img) {
+      _eglError(EGL_BAD_ALLOC, "dri2_create_image_khr_pixmap");
+      return NULL;
+   }
+
+   if (!_eglInitImage(&dri2_img->base, disp)) {
+      free(dri2_img);
+      return NULL;
+   }
+
+
+   dri2_img->dri_image = dri2_dpy->image->dupImage(dri_bo->image, dri2_img);
+   if (dri2_img->dri_image == NULL) {
+      free(dri2_img);
+      _eglError(EGL_BAD_ALLOC, "dri2_create_image_khr_pixmap");
+      return NULL;
+   }
+
+   return &dri2_img->base;
+}
+
+static _EGLImage *
+dri2_mir_create_image_khr(_EGLDriver *drv, _EGLDisplay *disp,
+                          _EGLContext *ctx, EGLenum target,
+                          EGLClientBuffer buffer, const EGLint *attr_list)
+{
+   (void) drv;
+
+   switch (target) {
+   case EGL_NATIVE_PIXMAP_KHR:
+      return dri2_create_image_khr_pixmap(disp, ctx, buffer, attr_list);
+   default:
+      return dri2_create_image_khr(drv, disp, ctx, target, buffer, attr_list);
+   }
+}
+
+static struct dri2_egl_display_vtbl dri2_mir_display_vtbl = {
+   .authenticate = dri2_mir_authenticate,
+   .create_window_surface = dri2_create_mir_window_surface,
+   .create_pixmap_surface = dri2_mir_create_pixmap_surface,
+   .create_pbuffer_surface = dri2_fallback_create_pbuffer_surface,
+   .destroy_surface = dri2_destroy_mir_surface,
+   .create_image = dri2_mir_create_image_khr,
+   .swap_interval = dri2_set_swap_interval,
+   .swap_buffers = dri2_swap_buffers,
+   .swap_buffers_with_damage = dri2_fallback_swap_buffers_with_damage,
+   .swap_buffers_region = dri2_fallback_swap_buffers_region,
+   .post_sub_buffer = dri2_fallback_post_sub_buffer,
+   .copy_buffers = dri2_fallback_copy_buffers,
+   .query_buffer_age = dri2_fallback_query_buffer_age,
+   .create_wayland_buffer_from_image = NULL,
+};
+
+EGLBoolean
+dri2_initialize_mir(_EGLDriver *drv, _EGLDisplay *disp)
+{
+   struct dri2_egl_display *dri2_dpy;
+   struct gbm_device *gbm = NULL;
+   MirPlatformPackage platform;
+   const __DRIconfig *config;
+   static const unsigned int argb_masks[4] =
+      { 0xff0000, 0xff00, 0xff, 0xff000000 };
+   uint32_t types;
+   int i;
+
+   loader_set_logger(_eglLog);
+
+   dri2_dpy = calloc(1, sizeof *dri2_dpy);
+   if (!dri2_dpy)
+      return _eglError(EGL_BAD_ALLOC, "eglInitialize");
+
+   disp->DriverData = (void *) dri2_dpy;
+   dri2_dpy->mir_disp = disp->PlatformDisplay;
+   dri2_dpy->mir_disp->display_get_platform(dri2_dpy->mir_disp, &platform);
+   dri2_dpy->fd = platform.fd[0];
+   dri2_dpy->device_name = loader_get_device_name_for_fd(dri2_dpy->fd);
+
+   /*
+    * At the moment, a pointer to gbm_device is the first and only
+    * information optionally contained in platform.data[].
+    */
+   if (platform.data_items == 0) {
+      dri2_dpy->own_device = 1;
+      dri2_dpy->fd = dup(dri2_dpy->fd);
+      gbm = gbm_create_device(dri2_dpy->fd);
+      if (gbm == NULL)
+         goto cleanup_dpy;
+   }
+   else {
+      gbm = *(struct gbm_device**)platform.data;
+   }
+
+   if (gbm) {
+      struct gbm_dri_device *gbm_dri = gbm_dri_device(gbm);
+
+      dri2_dpy->gbm_dri = gbm_dri;
+      dri2_dpy->driver_name = gbm_dri->base.driver_name;
+      dri2_dpy->dri_screen = gbm_dri->screen;
+      dri2_dpy->core = gbm_dri->core;
+      dri2_dpy->dri2 = gbm_dri->dri2;
+      dri2_dpy->image = gbm_dri->image;
+      dri2_dpy->flush = gbm_dri->flush;
+      dri2_dpy->driver_configs = gbm_dri->driver_configs;
+
+      gbm_dri->lookup_image = dri2_lookup_egl_image;
+      gbm_dri->lookup_user_data = disp;
+
+      gbm_dri->get_buffers = dri2_get_buffers;
+      gbm_dri->flush_front_buffer = dri2_flush_front_buffer;
+      gbm_dri->get_buffers_with_format = dri2_get_buffers_with_format;
+
+      dri2_setup_screen(disp);
+   }
+
+   types = EGL_WINDOW_BIT;
+   for (i = 0; dri2_dpy->driver_configs[i]; i++) {
+      config = dri2_dpy->driver_configs[i];
+      dri2_add_config(disp, config, i + 1, types, NULL, argb_masks);
+   }
+
+   disp->Extensions.EXT_buffer_age = EGL_TRUE;
+   disp->Extensions.EXT_swap_buffers_with_damage = EGL_TRUE;
+
+   disp->VersionMajor = 1;
+   disp->VersionMinor = 4;
+   dri2_dpy->vtbl = &dri2_mir_display_vtbl;
+
+   return EGL_TRUE;
+
+ cleanup_dpy:
+   free(dri2_dpy);
+
+   return EGL_FALSE;
+}
--- a/src/egl/main/Makefile.am
+++ b/src/egl/main/Makefile.am
@@ -106,6 +106,11 @@
 AM_CFLAGS += -DHAVE_NULL_PLATFORM
 endif
 
+if HAVE_EGL_PLATFORM_MIR
+AM_CFLAGS += -DHAVE_MIR_PLATFORM
+AM_CFLAGS += $(MIR_CFLAGS)
+endif
+
 if HAVE_EGL_DRIVER_DRI2
 AM_CFLAGS += -D_EGL_BUILT_IN_DRIVER_DRI2
 AM_CFLAGS += -DHAVE_XCB_DRI2
--- a/src/egl/main/egldisplay.c
+++ b/src/egl/main/egldisplay.c
@@ -60,7 +60,10 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #endif
-
+#ifdef HAVE_MIR_PLATFORM
+#include <dlfcn.h>
+#include <mir_toolkit/mesa/native_display.h>
+#endif
 
 /**
  * Map --with-egl-platforms names to platform types.
@@ -75,7 +78,8 @@
    { _EGL_PLATFORM_DRM, "drm" },
    { _EGL_PLATFORM_FBDEV, "fbdev" },
    { _EGL_PLATFORM_NULL, "null" },
-   { _EGL_PLATFORM_ANDROID, "android" }
+   { _EGL_PLATFORM_ANDROID, "android" },
+   { _EGL_PLATFORM_MIR, "mir" },
 };
 
 
@@ -135,6 +139,47 @@
 #endif
 }
 
+#ifdef HAVE_MIR_PLATFORM
+static EGLBoolean
+_mir_display_is_valid(EGLNativeDisplayType nativeDisplay)
+{
+   typedef int (*MirEGLNativeDisplayIsValidFunc)(MirMesaEGLNativeDisplay*);
+
+   void *lib;
+   MirEGLNativeDisplayIsValidFunc general_check;
+   MirEGLNativeDisplayIsValidFunc client_check;
+   MirEGLNativeDisplayIsValidFunc server_check;
+   EGLBoolean is_valid = EGL_FALSE;
+
+   lib = dlopen(NULL, RTLD_LAZY);
+   if (lib == NULL)
+      return EGL_FALSE;
+
+   general_check = (MirEGLNativeDisplayIsValidFunc) dlsym(lib, "mir_egl_mesa_display_is_valid");
+   client_check = (MirEGLNativeDisplayIsValidFunc) dlsym(lib, "mir_client_mesa_egl_native_display_is_valid");
+   server_check = (MirEGLNativeDisplayIsValidFunc) dlsym(lib, "mir_server_mesa_egl_native_display_is_valid");
+
+   if (general_check != NULL &&
+       general_check((MirMesaEGLNativeDisplay *)nativeDisplay))
+   {
+      is_valid = EGL_TRUE;
+   }
+   else if (client_check != NULL &&
+            client_check((MirMesaEGLNativeDisplay *)nativeDisplay))
+   {
+      is_valid = EGL_TRUE;
+   }
+   else if (server_check != NULL &&
+            server_check((MirMesaEGLNativeDisplay *)nativeDisplay))
+   {
+      is_valid = EGL_TRUE;
+   }
+
+   dlclose(lib);
+
+   return is_valid;
+}
+#endif
 
 /**
  * Try detecting native platform with the help of native display characteristcs.
@@ -155,6 +200,11 @@
       return _EGL_PLATFORM_FBDEV;
 #endif
 
+#ifdef HAVE_MIR_PLATFORM
+   if (_mir_display_is_valid(nativeDisplay))
+      return _EGL_PLATFORM_MIR;
+#endif
+
    if (_eglPointerIsDereferencable(nativeDisplay)) {
       void *first_pointer = *(void **) nativeDisplay;
 
@@ -189,7 +239,7 @@
 _EGLPlatformType
 _eglGetNativePlatform(void *nativeDisplay)
 {
-   static _EGLPlatformType native_platform = _EGL_INVALID_PLATFORM;
+   _EGLPlatformType native_platform = _EGL_INVALID_PLATFORM;
    char *detection_method = NULL;
 
    if (native_platform == _EGL_INVALID_PLATFORM) {
--- a/src/egl/main/egldisplay.h
+++ b/src/egl/main/egldisplay.h
@@ -46,6 +46,7 @@
    _EGL_PLATFORM_FBDEV,
    _EGL_PLATFORM_NULL,
    _EGL_PLATFORM_ANDROID,
+   _EGL_PLATFORM_MIR,
 
    _EGL_NUM_PLATFORMS,
    _EGL_INVALID_PLATFORM = -1
--- a/src/egl/main/egldriver.c
+++ b/src/egl/main/egldriver.c
@@ -57,7 +57,7 @@
    char *Path;
    _EGLMain_t BuiltIn;
    void *Handle;
-   _EGLDriver *Driver;
+   _EGLDriver *Driver[_EGL_NUM_PLATFORMS];
 } _EGLModule;
 
 static _EGLMutex _eglModuleMutex = _EGL_MUTEX_INITIALIZER;
@@ -131,7 +131,6 @@
 
 #endif
 
-
 /**
  * Open the named driver and find its bootstrap function: _eglMain().
  */
@@ -144,8 +143,12 @@
 
    assert(driverPath);
 
-   _eglLog(_EGL_DEBUG, "dlopen(%s)", driverPath);
-   lib = open_library(driverPath);
+   if (*handle) {
+      lib = *handle;
+   } else {
+      _eglLog(_EGL_DEBUG, "dlopen(%s)", driverPath);
+      lib = open_library(driverPath);
+   }
 
 #if defined(_EGL_OS_WINDOWS)
    /* XXX untested */
@@ -191,13 +194,13 @@
  * Load a module and create the driver object.
  */
 static EGLBoolean
-_eglLoadModule(_EGLModule *mod)
+_eglLoadModule(_EGLModule *mod, _EGLPlatformType plat)
 {
    _EGLMain_t mainFunc;
-   lib_handle lib;
+   lib_handle lib = (lib_handle) mod->Handle;
    _EGLDriver *drv;
 
-   if (mod->Driver)
+   if (mod->Driver[plat])
       return EGL_TRUE;
 
    if (mod->BuiltIn) {
@@ -223,7 +226,7 @@
    }
 
    mod->Handle = (void *) lib;
-   mod->Driver = drv;
+   mod->Driver[plat] = drv;
 
    return EGL_TRUE;
 }
@@ -237,8 +240,10 @@
 {
 #if defined(_EGL_OS_UNIX)
    /* destroy the driver */
-   if (mod->Driver && mod->Driver->Unload)
-      mod->Driver->Unload(mod->Driver);
+   for (int plat = 0; plat < _EGL_NUM_PLATFORMS; ++plat) {
+      if (mod->Driver[plat] && mod->Driver[plat]->Unload)
+         mod->Driver[plat]->Unload(mod->Driver[plat]);
+   }
 
    /*
     * XXX At this point (atexit), the module might be the last reference to
@@ -252,7 +257,9 @@
    /* XXX Windows unloads DLLs before atexit */
 #endif
 
-   mod->Driver = NULL;
+   for (int plat = 0; plat < _EGL_NUM_PLATFORMS; ++plat) {
+      mod->Driver[plat] = NULL;
+   }
    mod->Handle = NULL;
 }
 
@@ -596,17 +603,17 @@
    while (i < _eglModules->Size) {
       _EGLModule *mod = (_EGLModule *) _eglModules->Elements[i];
 
-      if (!_eglLoadModule(mod)) {
+      if (!_eglLoadModule(mod, dpy->Platform)) {
          /* remove invalid modules */
          _eglEraseArray(_eglModules, i, _eglFreeModule);
          continue;
       }
 
-      if (mod->Driver->API.Initialize(mod->Driver, dpy)) {
-         drv = mod->Driver;
+      drv = mod->Driver[dpy->Platform];
+      if (drv->API.Initialize(drv, dpy))
          break;
-      }
       else {
+         drv = NULL;
          i++;
       }
    }
@@ -658,7 +665,6 @@
 _eglGetDriverProc(const char *procname)
 {
    EGLint i;
-   _EGLProc proc = NULL;
 
    if (!_eglModules) {
       /* load the driver for the default display */
@@ -670,15 +676,18 @@
 
    for (i = 0; i < _eglModules->Size; i++) {
       _EGLModule *mod = (_EGLModule *) _eglModules->Elements[i];
+      _EGLProc proc;
 
-      if (!mod->Driver)
-         break;
-      proc = mod->Driver->API.GetProcAddress(mod->Driver, procname);
-      if (proc)
-         break;
+      for (_EGLPlatformType plat = 0; plat < _EGL_NUM_PLATFORMS; ++plat) {
+         if (!mod->Driver[plat])
+            continue;
+         proc = mod->Driver[plat]->API.GetProcAddress(mod->Driver[plat], procname);
+         if (proc)
+            return proc;
+      }
    }
 
-   return proc;
+   return NULL;
 }
 
 
--- a/src/gallium/state_trackers/dri/drm/dri2.c
+++ b/src/gallium/state_trackers/dri/drm/dri2.c
@@ -306,8 +306,13 @@
 
       templ.format = format;
       templ.bind = bind;
-      whandle.type = DRM_API_HANDLE_TYPE_SHARED;
-      whandle.handle = buf->name;
+      if (buf->name != 0) {
+         whandle.type = DRM_API_HANDLE_TYPE_SHARED;
+         whandle.handle = buf->name;
+      } else {
+         whandle.type = DRM_API_HANDLE_TYPE_FD;
+         whandle.handle = buf->fd;
+      }
       whandle.stride = buf->pitch;
 
       drawable->textures[statt] =
--- a/src/gbm/backends/dri/gbm_dri.c
+++ b/src/gbm/backends/dri/gbm_dri.c
@@ -135,7 +135,7 @@
 };
 
 static const __DRIdri2LoaderExtension dri2_loader_extension = {
-   .base = { __DRI_DRI2_LOADER, 3 },
+   .base = { __DRI_DRI2_LOADER, 4 },
 
    .getBuffers              = dri_get_buffers,
    .flushFrontBuffer        = dri_flush_front_buffer,
@@ -336,9 +336,11 @@
    switch (format) {
    case GBM_BO_FORMAT_XRGB8888:
    case GBM_FORMAT_XRGB8888:
+   case GBM_FORMAT_XBGR8888:
       break;
    case GBM_BO_FORMAT_ARGB8888:
    case GBM_FORMAT_ARGB8888:
+   case GBM_FORMAT_ABGR8888:
       if (usage & GBM_BO_USE_SCANOUT)
          return 0;
       break;
@@ -420,6 +422,9 @@
    case __DRI_IMAGE_FORMAT_ABGR8888:
       ret = GBM_FORMAT_ABGR8888;
       break;
+   case __DRI_IMAGE_FORMAT_XBGR8888:
+      ret = GBM_FORMAT_XBGR8888;
+      break;
    default:
       ret = 0;
       break;
@@ -428,6 +433,41 @@
    return ret;
 }
 
+static uint32_t
+gbm_to_dri_format(uint32_t gbm_format)
+{
+   uint32_t dri_format = 0;
+
+   switch (gbm_format) {
+   case GBM_FORMAT_RGB565:
+      dri_format =__DRI_IMAGE_FORMAT_RGB565;
+      break;
+   case GBM_FORMAT_XRGB8888:
+   case GBM_BO_FORMAT_XRGB8888:
+      dri_format = __DRI_IMAGE_FORMAT_XRGB8888;
+      break;
+   case GBM_FORMAT_ARGB8888:
+   case GBM_BO_FORMAT_ARGB8888:
+      dri_format = __DRI_IMAGE_FORMAT_ARGB8888;
+      break;
+   case GBM_FORMAT_ABGR8888:
+      dri_format = __DRI_IMAGE_FORMAT_ABGR8888;
+      break;
+   case GBM_FORMAT_ARGB2101010:
+      dri_format = __DRI_IMAGE_FORMAT_ARGB2101010;
+      break;
+   case GBM_FORMAT_XRGB2101010:
+      dri_format = __DRI_IMAGE_FORMAT_XRGB2101010;
+   case GBM_FORMAT_XBGR8888:
+      dri_format = __DRI_IMAGE_FORMAT_XBGR8888;
+      break;
+   default:
+      dri_format = __DRI_IMAGE_FORMAT_NONE;
+   }
+
+   return dri_format;
+}
+
 static struct gbm_bo *
 gbm_dri_bo_import(struct gbm_device *gbm,
                   uint32_t type, void *buffer, uint32_t usage)
@@ -644,31 +684,7 @@
    bo->base.base.height = height;
    bo->base.base.format = format;
 
-   switch (format) {
-   case GBM_FORMAT_RGB565:
-      dri_format =__DRI_IMAGE_FORMAT_RGB565;
-      break;
-   case GBM_FORMAT_XRGB8888:
-   case GBM_BO_FORMAT_XRGB8888:
-      dri_format = __DRI_IMAGE_FORMAT_XRGB8888;
-      break;
-   case GBM_FORMAT_ARGB8888:
-   case GBM_BO_FORMAT_ARGB8888:
-      dri_format = __DRI_IMAGE_FORMAT_ARGB8888;
-      break;
-   case GBM_FORMAT_ABGR8888:
-      dri_format = __DRI_IMAGE_FORMAT_ABGR8888;
-      break;
-   case GBM_FORMAT_ARGB2101010:
-      dri_format = __DRI_IMAGE_FORMAT_ARGB2101010;
-      break;
-   case GBM_FORMAT_XRGB2101010:
-      dri_format = __DRI_IMAGE_FORMAT_XRGB2101010;
-      break;
-   default:
-      errno = EINVAL;
-      goto failed;
-   }
+   dri_format = gbm_to_dri_format(format);
 
    if (usage & GBM_BO_USE_SCANOUT)
       dri_use |= __DRI_IMAGE_USE_SCANOUT;
--- a/src/mesa/drivers/dri/i915/intel_context.c
+++ b/src/mesa/drivers/dri/i915/intel_context.c
@@ -775,24 +775,36 @@
     */
    if (rb->mt &&
        rb->mt->region &&
-       rb->mt->region->name == buffer->name)
+       rb->mt->region->name == buffer->name &&
+       rb->mt->region->name != 0)
       return;
 
    if (unlikely(INTEL_DEBUG & DEBUG_DRI)) {
       fprintf(stderr,
-	      "attaching buffer %d, at %d, cpp %d, pitch %d\n",
+	      "attaching buffer %d, at %d, cpp %d, pitch %d, fd %d\n",
 	      buffer->name, buffer->attachment,
-	      buffer->cpp, buffer->pitch);
+	      buffer->cpp, buffer->pitch, buffer->fd);
    }
 
    intel_miptree_release(&rb->mt);
-   region = intel_region_alloc_for_handle(intel->intelScreen,
-                                          buffer->cpp,
-                                          drawable->w,
-                                          drawable->h,
-                                          buffer->pitch,
-                                          buffer->name,
-                                          buffer_name);
+   if (buffer->name != 0) {
+      region = intel_region_alloc_for_handle(intel->intelScreen,
+                                             buffer->cpp,
+                                             drawable->w,
+                                             drawable->h,
+                                             buffer->pitch,
+                                             buffer->name,
+                                             buffer_name);
+   } else {
+      region = intel_region_alloc_for_fd(intel->intelScreen,
+                                         buffer->cpp,
+                                         drawable->w,
+                                         drawable->h,
+                                         buffer->pitch,
+                                         0, /* Can we be so silly? */
+                                         buffer->fd,
+                                         buffer_name);
+   }
    if (!region)
       return;
 
--- a/src/mesa/drivers/dri/i965/brw_context.c
+++ b/src/mesa/drivers/dri/i965/brw_context.c
@@ -1010,7 +1010,7 @@
                           struct intel_renderbuffer *rb,
                           const char *buffer_name);
 
-static void
+static int
 intel_update_image_buffers(struct brw_context *brw, __DRIdrawable *drawable);
 
 static void
@@ -1083,9 +1083,7 @@
    if (unlikely(INTEL_DEBUG & DEBUG_DRI))
       fprintf(stderr, "enter %s, drawable %p\n", __func__, drawable);
 
-   if (screen->image.loader)
-      intel_update_image_buffers(brw, drawable);
-   else
+   if (!screen->image.loader || !intel_update_image_buffers(brw, drawable))
       intel_update_dri2_buffers(brw, drawable);
 
    driUpdateFramebufferSize(&brw->ctx, drawable);
@@ -1282,8 +1280,13 @@
    }
 
    intel_miptree_release(&rb->mt);
-   bo = drm_intel_bo_gem_create_from_name(brw->bufmgr, buffer_name,
-                                          buffer->name);
+   if (buffer->name)
+      bo = drm_intel_bo_gem_create_from_name(brw->bufmgr, buffer_name,
+                                             buffer->name);
+   else
+      bo = drm_intel_bo_gem_create_from_prime(brw->bufmgr, buffer->fd,
+                                             buffer->pitch * drawable->h);
+
    if (!bo) {
       fprintf(stderr,
               "Failed to open BO for returned DRI2 buffer "
@@ -1363,7 +1366,7 @@
    }
 }
 
-static void
+static int
 intel_update_image_buffers(struct brw_context *brw, __DRIdrawable *drawable)
 {
    struct gl_framebuffer *fb = drawable->driverPrivate;
@@ -1382,7 +1385,7 @@
    else if (front_rb)
       format = intel_rb_format(front_rb);
    else
-      return;
+      return 0;
 
    if (front_rb && (brw_is_front_buffer_drawing(fb) ||
                     brw_is_front_buffer_reading(fb) || !back_rb)) {
@@ -1392,12 +1395,13 @@
    if (back_rb)
       buffer_mask |= __DRI_IMAGE_BUFFER_BACK;
 
-   (*screen->image.loader->getBuffers) (drawable,
-                                        driGLFormatToImageFormat(format),
-                                        &drawable->dri2.stamp,
-                                        drawable->loaderPrivate,
-                                        buffer_mask,
-                                        &images);
+   if (!(*screen->image.loader->getBuffers) (drawable,
+                                             driGLFormatToImageFormat(format),
+                                             &drawable->dri2.stamp,
+                                             drawable->loaderPrivate,
+                                             buffer_mask,
+                                             &images))
+      return 0;
 
    if (images.image_mask & __DRI_IMAGE_BUFFER_FRONT) {
       drawable->w = images.front->width;
@@ -1417,4 +1421,5 @@
                                 images.back,
                                 __DRI_IMAGE_BUFFER_BACK);
    }
+   return 1;
 }
