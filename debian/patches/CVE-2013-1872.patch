Description: fix denial of service and possible code execution via
 out-of-bands access
Origin: backport, http://cgit.freedesktop.org/mesa/mesa/commit/?id=0677ea063cd96adefe87c1fb01ef7c66d905535b
Bug: https://bugs.freedesktop.org/show_bug.cgi?id=59429

Index: mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs.cpp
===================================================================
--- mesa-9.0.3.orig/src/mesa/drivers/dri/i965/brw_fs.cpp	2013-06-18 14:02:34.944519611 -0400
+++ mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs.cpp	2013-06-18 14:02:34.936519611 -0400
@@ -496,6 +496,7 @@
 			   import_uniforms_callback,
 			   variable_ht);
    this->params_remap = v->params_remap;
+   this->nr_params_remap = v->nr_params_remap;
 }
 
 /* Our support for uniforms is piggy-backed on the struct
@@ -1110,6 +1111,7 @@
 {
    if (c->dispatch_width == 8) {
       this->params_remap = ralloc_array(mem_ctx, int, c->prog_data.nr_params);
+      this->nr_params_remap = c->prog_data.nr_params;
 
       for (unsigned int i = 0; i < c->prog_data.nr_params; i++)
 	 this->params_remap[i] = -1;
@@ -1124,7 +1126,14 @@
 	    if (inst->src[i].file != UNIFORM)
 	       continue;
 
-	    assert(constant_nr < (int)c->prog_data.nr_params);
+	    /* Section 5.11 of the OpenGL 4.3 spec says:
+	     *
+	     *     "Out-of-bounds reads return undefined values, which include
+	     *     values from other variables of the active program or zero."
+	     */
+	    if (constant_nr < 0 || constant_nr >= (int)c->prog_data.nr_params) {
+	       constant_nr = 0;
+	    }
 
 	    /* For now, set this to non-negative.  We'll give it the
 	     * actual new number in a moment, in order to keep the
@@ -1175,6 +1184,10 @@
 	 if (inst->src[i].file != UNIFORM)
 	    continue;
 
+	 /* as above alias to 0 */
+	 if (constant_nr < 0 || constant_nr >= (int)this->nr_params_remap) {
+	    constant_nr = 0;
+	 }
 	 assert(this->params_remap[constant_nr] != -1);
 	 inst->src[i].reg = this->params_remap[constant_nr];
 	 inst->src[i].reg_offset = 0;
Index: mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs.h
===================================================================
--- mesa-9.0.3.orig/src/mesa/drivers/dri/i965/brw_fs.h	2013-06-18 14:02:34.944519611 -0400
+++ mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs.h	2013-06-18 14:02:34.936519611 -0400
@@ -368,6 +368,7 @@
     * uniform index.
     */
    int *params_remap;
+   int nr_params_remap;
 
    struct hash_table *variable_ht;
    ir_variable *frag_depth;
Index: mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs_visitor.cpp
===================================================================
--- mesa-9.0.3.orig/src/mesa/drivers/dri/i965/brw_fs_visitor.cpp	2013-06-18 14:02:34.944519611 -0400
+++ mesa-9.0.3/src/mesa/drivers/dri/i965/brw_fs_visitor.cpp	2013-06-18 14:02:34.936519611 -0400
@@ -2279,6 +2279,9 @@
    this->virtual_grf_use = NULL;
    this->live_intervals_valid = false;
 
+   this->params_remap = NULL;
+   this->nr_params_remap = 0;
+
    this->force_uncompressed_stack = 0;
    this->force_sechalf_stack = 0;
 }
