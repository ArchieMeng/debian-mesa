Index: mesa/src/mesa/drivers/dri/savage/savage_xmesa.c
===================================================================
--- mesa.orig/src/mesa/drivers/dri/savage/savage_xmesa.c	2011-01-24 18:31:53.000000000 +1100
+++ mesa/src/mesa/drivers/dri/savage/savage_xmesa.c	2011-01-24 18:42:07.157623000 +1100
@@ -61,6 +61,8 @@
 
 #include "xmlpool.h"
 
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof(x[0]))
+
 /* Driver-specific options
  */
 #define SAVAGE_ENABLE_VDMA(def) \
@@ -891,11 +893,11 @@
 		   unsigned stencil_bits, GLboolean have_back_buffer )
 {
     __DRIconfig **configs;
+    __DRIconfig **configs_a8r8g8b8;
+    __DRIconfig **configs_x8r8g8b8;
     struct gl_config * m;
     unsigned depth_buffer_factor;
     unsigned back_buffer_factor;
-    GLenum fb_format;
-    GLenum fb_type;
     int i;
 
     /* Right now GLX_SWAP_COPY_OML isn't supported, but it would be easy
@@ -914,6 +916,11 @@
     uint8_t stencil_bits_array[2];
     uint8_t msaa_samples_array[1];
 
+    /* This being a DRI1 driver the depth buffer is always allocated,
+     * so it does not make sense to expose visuals without it. If this
+     * driver ever gets ported to DRI2 the first array value should be
+     * changed to 0 to expose modes without a depth buffer.
+     */
     depth_bits_array[0] = depth_bits;
     depth_bits_array[1] = depth_bits;
     
@@ -930,19 +937,32 @@
     back_buffer_factor  = (have_back_buffer) ? 2 : 1;
 
     if ( pixel_bits == 16 ) {
-        fb_format = GL_RGB;
-        fb_type = GL_UNSIGNED_SHORT_5_6_5;
+        configs = driCreateConfigs(GL_RGB, GL_UNSIGNED_SHORT_5_6_5,
+                               depth_bits_array, stencil_bits_array,
+                               depth_buffer_factor,
+                               back_buffer_modes, back_buffer_factor,
+                               msaa_samples_array, 1, GL_TRUE);
     }
     else {
-        fb_format = GL_BGR;
-        fb_type = GL_UNSIGNED_INT_8_8_8_8_REV;
+        configs_a8r8g8b8 = driCreateConfigs(GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV,
+                                         depth_bits_array,
+                                         stencil_bits_array,
+                                         depth_buffer_factor,
+                                         back_buffer_modes,
+                                         back_buffer_factor,
+                                         msaa_samples_array, 1,
+                                         GL_TRUE);
+        configs_x8r8g8b8 = driCreateConfigs(GL_BGR, GL_UNSIGNED_INT_8_8_8_8_REV,
+                                         depth_bits_array,
+                                         stencil_bits_array,
+                                         depth_buffer_factor,
+                                         back_buffer_modes,
+                                         back_buffer_factor,
+                                         msaa_samples_array, 1,
+                                         GL_TRUE);
+        configs = driConcatConfigs(configs_a8r8g8b8, configs_x8r8g8b8);
     }
 
-    configs = driCreateConfigs(fb_format, fb_type,
-			       depth_bits_array, stencil_bits_array,
-			       depth_buffer_factor,
-			       back_buffer_modes, back_buffer_factor,
-                               msaa_samples_array, 1, GL_TRUE);
     if (configs == NULL) {
 	fprintf( stderr, "[%s:%u] Error creating FBConfig!\n",
 		 __func__, __LINE__ );
