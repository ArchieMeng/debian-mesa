/*
 * Mesa 3-D graphics library
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const int _mesa_VerticesInMax = 6;

__fixed_input int gl_PrimitiveIDIn;
__fixed_output int gl_PrimitiveID;
__fixed_output int gl_Layer;


varying in vec4 gl_FrontColorIn[_mesa_VerticesInMax];
varying in vec4 gl_BackColorIn[_mesa_VerticesInMax];
varying in vec4 gl_FrontSecondaryColorIn[_mesa_VerticesInMax];
varying in vec4 gl_BackSecondaryColorIn[_mesa_VerticesInMax];
/*varying in vec4 gl_TexCoordIn[_mesa_VerticesInMax][gl_MaxTextureCoords];*/
varying in float gl_FogFragCoordIn[_mesa_VerticesInMax];
varying in vec4 gl_PositionIn[_mesa_VerticesInMax];
varying in float gl_PointSizeIn[_mesa_VerticesInMax];
varying in vec4 gl_ClipVertexIn[_mesa_VerticesInMax];

varying out vec4 gl_Position;
varying out vec4 gl_FrontColor;
varying out vec4 gl_BackColor;
varying out vec4 gl_FrontSecondaryColor;
varying out vec4 gl_BackSecondaryColor;
varying out vec4 gl_TexCoord[gl_MaxTextureCoords];
varying out float gl_FogFragCoord;

void EmitVertex()
{
    __asm emit_vertex;
}

void EndPrimitive()
{
    __asm end_primitive;
}
